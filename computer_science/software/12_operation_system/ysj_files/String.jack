// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str; 
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1);
        } else {
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;  
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];      
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {   
            let str[length-1] = 0;
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i; // 인덱스
        var int val; // 전체 정수 값
        var int d; // 각 자리수 값
        let val = 0; 
        let i = 0; 
        while (i < length) {
            if ((str[i] > 47) & (str[i] < 58)) { // 문자가 0~9 사이인 경우, 아니면 건너뜀. 명세가 그럼
                let d = str[i] - 48; // 정수 값 계산, 해당 str[i]의 값을 d에 저장
                let val = (val * 10) + d; // 기존 값에 새로 구한 d까지 포함해서 val에 저장
            }
            let i = i + 1; // 다음 문자로 이동
        }
        // 이거 근데 처음부터 음수 여부 확인해서 isNeg 해도 되지 않나?
        if (str[0] = 45) { // 첫 문자가 '-'인 경우
            let val = -val; // 음수로 변환
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int last_digit, c, val;
        // 마지막 자리수 계산 - 제일 높은 자리수
        let last_digit = Math.abs(val) - Math.abs((10 * (val / 10)));
        // 마지막 자리수에 해당하는 문자 코드 계산
        let c = 48 + last_digit;
        if (Math.abs(val) < 10) { // 한 자리수인 경우
            while (~(length = 0)) { // 문자열이 비어있지 않은 동안
                do eraseLastChar(); // 마지막 문자 제거
            }
            if (val < 0) { // 음수인 경우
                do appendChar(45); // '-' 문자 추가
            }
            do appendChar(c); // 마지막 자리수 문자 추가
        } else { // 두 자리 이상인 경우
            do setInt(val / 10); // 높은 자리수부터 재귀적으로 처리
            do appendChar(c); // 마지막 자리수 문자 추가
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // Hack 문자 집합 참고
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
